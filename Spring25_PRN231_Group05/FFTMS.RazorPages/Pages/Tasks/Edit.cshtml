@page "{id:guid}"
@model FFTMS.RazorPages.Pages.Tasks.EditModel
@{
    ViewData["Title"] = "Edit Task";
    Layout = "_Layout";
}

<div class="main-container">
    <div class="pd-ltr-20 xs-pd-20-10">
        <div class="min-height-200px">
            <div class="page-header">
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        <div class="title">
                            <h4>Edit Task</h4>
                        </div>
                        <nav aria-label="breadcrumb" role="navigation">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a asp-page="/Index">Home</a></li>
                                <li class="breadcrumb-item"><a asp-page="/Tasks/Index">Tasks</a></li>
                                <li class="breadcrumb-item active">Edit</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger" style="white-space: pre-line">
                    @Model.ErrorMessage
                </div>
            }

            <div class="pd-20 card-box mb-30">
                <form method="post" class="needs-validation" novalidate>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="TaskId" />
                    <input type="hidden" asp-for="Task.AssignedBy" />

                    <div class="form-group">
                        <label asp-for="Task.JobTitle">Job Title</label>
                        <input asp-for="Task.JobTitle" class="form-control" required />
                        <div class="invalid-feedback">Please enter a job title</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.Description">Description</label>
                        <textarea asp-for="Task.Description" class="form-control" required></textarea>
                        <div class="invalid-feedback">Please enter a description</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.ProductFieldId">Product Field</label>
                        <select asp-for="Task.ProductFieldId" asp-items="@Model.ProductFieldList" class="form-control"
                            id="productFieldSelect" required>
                            <option value="">Select Product Field</option>
                        </select>
                        <div class="invalid-feedback">Please select a product field</div>
                    </div>

                    <div id="productFieldDetails" class="card mt-3 d-none">
                        <div class="card-body">
                            <h5 class="card-title mb-3">Product Field Details</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Field Name:</strong> <span id="fieldName"></span></p>
                                    <p><strong>Field Size:</strong> <span id="fieldSize"></span></p>
                                    <p><strong>Field Status:</strong> <span id="fieldStatus"></span></p>
                                    <p><strong>Start Date:</strong> <span id="startDate"></span></p>
                                    <p><strong>End Date:</strong> <span id="endDate"></span></p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Product Name:</strong> <span id="productName"></span></p>
                                    <p><strong>Product Description:</strong> <span id="productDesc"></span></p>
                                    <p><strong>Category:</strong> <span id="category"></span></p>
                                    <p><strong>Productivity:</strong> <span id="productivity"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Staff Assignments <span class="text-danger">*</span></label>
                        <div id="staffAssignments">
                            @for (var i = 0; i < Model.Task.UserTasks.Count; i++)
                            {
                                <div class="staff-assignment">
                                    <select name="Task.UserTasks[@i].AssignedTo" class="form-control mb-2 staff-select"
                                        data-previous="@Model.Task.UserTasks[i].AssignedTo" required>
                                        <option value="">Select Staff</option>
                                    </select>
                                    <div class="invalid-feedback">Please select a staff member</div>
                                    <textarea name="Task.UserTasks[@i].UserTaskDescription" class="form-control mb-2"
                                        placeholder="Task description for this staff"
                                        required>@Model.Task.UserTasks[i].UserTaskDescription</textarea>
                                    <div class="invalid-feedback">Please provide a task description</div>
                                    @if (i > 0)
                                    {
                                        <button type="button" class="btn btn-danger mb-3 remove-staff">Remove</button>
                                    }
                                </div>
                            }
                        </div>
                        <button type="button" id="addStaff" class="btn btn-secondary mt-2">Add Another Staff</button>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.StartDate">Start Date</label>
                        <input asp-for="Task.StartDate" type="date" class="form-control" id="startDate" required />
                        <div class="invalid-feedback">Please select a start date</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.EndDate">End Date</label>
                        <input asp-for="Task.EndDate" type="date" class="form-control" id="endDate" required />
                        <div class="invalid-feedback">End date must be after start date</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.Status">Status</label>
                        <select asp-for="Task.Status" class="form-control">
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <a asp-page="Index" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Kích hoạt form validation của Bootstrap
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        $(document).ready(function () {
            let staffCount = @Model.Task.UserTasks.Count;
            let selectedStaff = new Set();

            // Khởi tạo danh sách staff đã chọn và set selected value cho các staff cũ
            $('.staff-select').each(function (index) {
                let assignedTo = '@Html.Raw(Json.Serialize(Model.Task.UserTasks.Select(ut => ut.AssignedTo)))';
                let assignedUsers = JSON.parse(assignedTo);

                if (assignedUsers[index]) {
                    selectedStaff.add(assignedUsers[index]);
                    $(this).data('previous', assignedUsers[index]);
                }
            });

            // Cập nhật danh sách staff available
            function updateAvailableStaff() {
                $('.staff-select').each(function (index) {
                    let currentSelect = $(this);
                    let currentValue = currentSelect.data('previous');

                    let options = '<option value="">-- Select Staff --</option>';
                                                    @foreach (var item in Model.UserList)
                        {
                            @:if (!selectedStaff.has('@item.Value') || '@item.Value' === currentValue) {
                                @:options += `<option value="@item.Value" ${('@item.Value' === currentValue ? 'selected' : '')}> @item.Text</option>`;
                                @:}
                    }
                        currentSelect.html(options);
                });
            }

            // Xử lý khi thay đổi staff selection
            $(document).on('change', '.staff-select', function () {
                let previousValue = $(this).data('previous');
                let currentValue = $(this).val();

                if (previousValue) selectedStaff.delete(previousValue);
                if (currentValue) selectedStaff.add(currentValue);

                $(this).data('previous', currentValue);
                updateAvailableStaff();
            });

            // Thêm staff mới
            $('#addStaff').click(function () {
                if (staffCount < 5) {
                    const newStaff = `
                                                            <div class="staff-assignment">
                                                                <select name="Task.UserTasks[${staffCount}].AssignedTo" 
                                                                    class="form-control mb-2 staff-select">
                                                                    <option value="">-- Select Staff --</option>
                                                                </select>
                                                                <textarea name="Task.UserTasks[${staffCount}].UserTaskDescription" 
                                                                    class="form-control mb-2" 
                                                                    placeholder="Task description for this staff"></textarea>
                                                                <button type="button" class="btn btn-danger mb-3 remove-staff">Remove</button>
                                                            </div>`;
                    $('#staffAssignments').append(newStaff);
                    updateAvailableStaff();
                    staffCount++;
                }
                if (staffCount >= 5) {
                    $('#addStaff').prop('disabled', true);
                }
            });

            // Xóa staff
            $(document).on('click', '.remove-staff', function () {
                let staffSelect = $(this).closest('.staff-assignment').find('.staff-select');
                let value = staffSelect.val();
                if (value) selectedStaff.delete(value);

                $(this).closest('.staff-assignment').remove();
                staffCount--;
                $('#addStaff').prop('disabled', false);

                updateAvailableStaff();
            });

            // Khởi tạo ban đầu
            updateAvailableStaff();
        });

        // Hiển thị chi tiết Product Field
        const productFields = @Json.Serialize(Model.ProductFieldsData);

        $('#productFieldSelect').change(function () {
            const selectedId = $(this).val();
            const details = $('#productFieldDetails');

            if (!selectedId) {
                details.addClass('d-none');
                return;
            }

            const productField = productFields.find(pf => pf.productFieldId === selectedId);
            if (productField) {
                $('#fieldName').text(productField.field.fieldName);
                $('#fieldSize').text(`${productField.field.length}m x ${productField.field.width}m`);
                $('#fieldStatus').text(productField.field.status ? 'Active' : 'Inactive');
                $('#startDate').text(new Date(productField.startDate).toLocaleDateString());
                $('#endDate').text(new Date(productField.endDate).toLocaleDateString());
                $('#productName').text(productField.product.productName);
                $('#productDesc').text(productField.product.description);
                $('#category').text(productField.product.category.categoryName);
                $('#productivity').text(`${productField.productivity} ${productField.productivityUnit}`);

                details.removeClass('d-none');
            }
        });

        // Hiển thị chi tiết nếu đã có product field được chọn
        $(document).ready(function () {
            if ($('#productFieldSelect').val()) {
                $('#productFieldSelect').trigger('change');
            }
        });

        // Validation cho ngày tháng
        $('#startDate').change(function () {
            const startDate = new Date($(this).val());
            const endDateInput = $('#endDate');

            // Set min date cho end date
            const minEndDate = new Date(startDate);
            minEndDate.setDate(startDate.getDate() + 1);
            endDateInput.attr('min', minEndDate.toISOString().split('T')[0]);

            // Nếu end date nhỏ hơn start date + 1, tự động cập nhật
            const endDate = new Date(endDateInput.val());
            if (endDate <= startDate) {
                endDateInput.val(minEndDate.toISOString().split('T')[0]);
            }
        });
    </script>
}