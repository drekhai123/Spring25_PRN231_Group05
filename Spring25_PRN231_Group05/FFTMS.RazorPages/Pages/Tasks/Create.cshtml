@page
@using FlowerFarmTaskManagementSystem.BusinessObject.Models
@model FFTMS.RazorPages.Pages.Tasks.CreateModel
@{
    ViewData["Title"] = "Tạo công việc";
    Layout = "_Layout";
}

<div class="main-container">
    <div class="pd-ltr-20 xs-pd-20-10">
        <div class="min-height-200px">
            <div class="page-header">
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        <div class="title">
                            <h4>Tạo công việc mới</h4>
                        </div>
                        <nav aria-label="breadcrumb" role="navigation">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a asp-page="/Index">Trang chủ</a></li>
                                <li class="breadcrumb-item"><a asp-page="/Tasks/Index">Công việc</a></li>
                                <li class="breadcrumb-item active">Tạo mới</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    @Model.ErrorMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="pd-20 card-box mb-30">
                <form method="post" class="needs-validation" novalidate>
                    <div class="form-group">
                        <label asp-for="Task.JobTitle">Tên công việc</label>
                        <input asp-for="Task.JobTitle" class="form-control" required />
                        <div class="invalid-feedback">Vui lòng nhập tên công việc</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.Description">Mô tả công việc</label>
                        <textarea asp-for="Task.Description" class="form-control" rows="3" required></textarea>
                        <div class="invalid-feedback">Vui lòng nhập mô tả công việc</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.ProductFieldId">Sản phẩm - Ruộng</label>
                        <select asp-for="Task.ProductFieldId" asp-items="Model.ProductFieldList" class="form-control"
                            required>
                            <option value="">-- Chọn sản phẩm và ruộng --</option>
                        </select>
                        <div class="invalid-feedback">Vui lòng chọn sản phẩm và ruộng</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.StartDate">Ngày và giờ bắt đầu</label>
                        <input asp-for="Task.StartDate" type="datetime-local" class="form-control" id="startDate"
                            value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" required />
                        <div class="invalid-feedback">Vui lòng chọn ngày và giờ bắt đầu</div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Task.EndDate">Ngày và giờ kết thúc</label>
                        <input asp-for="Task.EndDate" type="datetime-local" class="form-control" id="endDate"
                            value="@DateTime.Now.AddHours(2).ToString("yyyy-MM-ddTHH:mm")" required
                            min="@DateTime.Now.AddHours(2).ToString("yyyy-MM-ddTHH:mm")" />
                        <div class="invalid-feedback">Thời gian kết thúc phải sau thời gian bắt đầu ít nhất 2 giờ</div>
                    </div>

                    <div class="form-group">
                        <label>Phân công nhân viên</label>
                        <div id="staffAssignments">
                            <div class="staff-assignment mb-3">
                                <div class="row">
                                    <div class="col-md-6">
                                        <select name="Task.UserTasks[0].AssignedTo" class="form-control staff-select"
                                            required>
                                            <option value="">-- Chọn nhân viên --</option>
                                            @foreach (var user in Model.UserList)
                                            {
                                                <option value="@user.Value">@user.Text</option>
                                            }
                                        </select>
                                        <div class="invalid-feedback">Vui lòng chọn nhân viên</div>
                                    </div>
                                    <div class="col-md-5">
                                        <input type="text" name="Task.UserTasks[0].UserTaskDescription"
                                            class="form-control" placeholder="Mô tả công việc cho nhân viên" required />
                                        <div class="invalid-feedback">Vui lòng nhập mô tả công việc cho nhân viên</div>
                                    </div>
                                    <div class="col-md-1">
                                        <button type="button" class="btn btn-danger remove-staff"
                                            style="display: none;">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="button" id="addStaff" class="btn btn-secondary mt-2">
                            <i class="fas fa-plus me-1"></i>Thêm nhân viên
                        </button>
                    </div>

                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>Lưu công việc
                        </button>
                        <a asp-page="./Index" class="btn btn-secondary">
                            <i class="fas fa-times me-1"></i>Hủy bỏ
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Kích hoạt form validation của Bootstrap
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        $(document).ready(function () {
            let staffCount = 1;
            let selectedStaff = new Set();

            // Theo dõi staff đã chọn ban đầu
            $('.staff-select').each(function () {
                let value = $(this).val();
                if (value) selectedStaff.add(value);
            });

            // Hàm lấy task hiện tại của một user
            function loadStaffTasks(userId, container) {
                if (!userId) {
                    container.addClass('d-none');
                    return;
                }

                container.removeClass('d-none');
                const tasksContainer = container.find('.staff-current-tasks');
                tasksContainer.html('<div class="text-center py-2"><div class="spinner-border spinner-border-sm text-primary" role="status"></div><span class="ms-2">Loading tasks...</span></div>');

                // Call API to get user tasks
                $.ajax({
                    url: `https://localhost:7207/odata/Task/GetTasksByUserId?userId=${userId}`,
                    type: 'GET',
                    success: function (data) {
                        if (data && data.length > 0) {
                            let tasksHtml = '<div class="list-group list-group-flush">';
                            data.forEach(task => {
                                const startDate = new Date(task.startDate);
                                const endDate = new Date(task.endDate);
                                const statusClass = task.status === 0 ? 'text-danger' :
                                    task.status === 1 ? 'text-warning' : 'text-success';
                                const statusText = task.status === 0 ? 'Waiting' :
                                    task.status === 1 ? 'Processing' : 'Completed';

                                // TaskStatus (0 = InProgress, 1 = Completed)
                                const taskStatusClass = task.taskStatus === 0 ? 'bg-warning' : 'bg-success';
                                const taskStatusText = task.taskStatus === 0 ? 'In Progress' : 'Completed';

                                tasksHtml += `
                                                                                                                <div class="list-group-item p-2 border-0">
                                                                                                                    <h6 class="mb-1">${task.jobTitle}</h6>
                                                                                                                    <p class="mb-1 small text-truncate">${task.description}</p>
                                                                                                                    <div class="d-flex justify-content-between align-items-center">
                                                                                                                        <small class="text-muted">
                                                                                                                            ${startDate.toLocaleDateString()} ${startDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - 
                                                                                                                            ${endDate.toLocaleDateString()} ${endDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                                                                                                        </small>
                                                                                                                        <div>
                                                                                                                            <span class="badge ${statusClass === 'text-danger' ? 'bg-danger' :
                                        statusClass === 'text-warning' ? 'bg-warning' : 'bg-success'} me-1">
                                                                                                                                ${statusText}
                                                                                                                            </span>
                                                                                                                            <span class="badge ${taskStatusClass}">
                                                                                                                                ${taskStatusText}
                                                                                                                            </span>
                                                                                                                        </div>
                                                                                                                    </div>
                                                                                                                </div>
                                                                                                            `;
                            });
                            tasksHtml += '</div>';
                            tasksContainer.html(tasksHtml);
                        } else {
                            tasksContainer.html('<div class="text-center p-2"><i class="fas fa-check-circle text-success me-2"></i>No active tasks assigned</div>');
                        }
                    },
                    error: function () {
                        tasksContainer.html('<div class="text-center p-2 text-danger"><i class="fas fa-exclamation-circle me-2"></i>Error loading tasks</div>');
                    }
                });
            }

            // Event handler for staff selection change
            $(document).on('change', '.staff-select', function () {
                let previousValue = $(this).data('previous');
                let currentValue = $(this).val();
                const tasksInfoContainer = $(this).siblings('.staff-tasks-info');

                if (previousValue) selectedStaff.delete(previousValue);
                if (currentValue) {
                    selectedStaff.add(currentValue);
                    // Load tasks for the selected staff
                    loadStaffTasks(currentValue, tasksInfoContainer);
                } else {
                    tasksInfoContainer.addClass('d-none');
                }

                $(this).data('previous', currentValue);
                updateAvailableStaff();
            });

            // Cập nhật danh sách staff available khi có thay đổi
            function updateAvailableStaff() {
                $('.staff-select').each(function () {
                    let currentSelect = $(this);
                    let currentValue = currentSelect.val();

                    // Lưu các option hiện tại
                    let options = '<option value="">-- Select Staff --</option>';
                                                                                                                @foreach (var item in Model.UserList)
                        {
                            @:if (!selectedStaff.has('@item.Value') || '@item.Value' === currentValue) {
                                @:options += `<option value="@item.Value" ${('@item.Value' === currentValue ? 'selected' : '')}> @item.Text</option>`;
                                @:}
                    }
                        currentSelect.html(options);
                });
            }

            // Thêm staff mới
            $('#addStaff').click(function () {
                if (staffCount < 5) {
                    const newStaff = `
                                                                                                                    <div class="staff-assignment">
                                                                                                                        <select name="Task.UserTasks[${staffCount}].AssignedTo" 
                                                                                                                            class="form-control mb-2 staff-select" required>
                                                                                                                            <option value="">-- Select Staff --</option>
                                                                                                                        </select>
                                                                                                                        <div class="invalid-feedback">Please select a staff member</div>
                                                                                                                        <div class="staff-tasks-info mb-2 d-none">
                                                                                                                            <div class="alert alert-info p-2">
                                                                                                                                <h6 class="mb-1"><i class="fas fa-info-circle me-2"></i>Current Tasks</h6>
                                                                                                                                <div class="staff-current-tasks">
                                                                                                                                    <div class="text-center py-2">
                                                                                                                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                                                                                                            <span class="visually-hidden">Loading...</span>
                                                                                                                                        </div>
                                                                                                                                        <span class="ms-2">Loading tasks...</span>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                        <textarea name="Task.UserTasks[${staffCount}].UserTaskDescription" 
                                                                                                                            class="form-control mb-2" required
                                                                                                                            placeholder="Task description for this staff"></textarea>
                                                                                                                        <div class="invalid-feedback">Please provide a task description</div>
                                                                                                                        <button type="button" class="btn btn-danger mb-3 remove-staff">Remove</button>
                                                                                                                    </div>`;
                    $('#staffAssignments').append(newStaff);
                    updateAvailableStaff();
                    staffCount++;
                }
                if (staffCount >= 5) {
                    $('#addStaff').prop('disabled', true);
                }
            });

            // Xóa staff
            $(document).on('click', '.remove-staff', function () {
                let staffSelect = $(this).closest('.staff-assignment').find('.staff-select');
                let value = staffSelect.val();
                if (value) selectedStaff.delete(value);

                $(this).closest('.staff-assignment').remove();
                staffCount--;
                $('#addStaff').prop('disabled', false);

                updateAvailableStaff();
            });

            // Kích hoạt ngay khi trang load
            $(document).ready(function () {
                // Kích hoạt validation ngày tháng khi trang load
                $('#startDate').trigger('change');
            });
        });

        const productFields = @Json.Serialize(Model.ProductFieldsData);

        $('#productFieldSelect').change(function () {
            const selectedId = $(this).val();
            const details = $('#productFieldDetails');

            if (!selectedId) {
                details.addClass('d-none');
                return;
            }

            const productField = productFields.find(pf => pf.productFieldId === selectedId);
            if (productField) {
                // Field information
                $('#fieldName').text(productField.field.fieldName);
                $('#fieldSize').text(`${productField.field.length}m x ${productField.field.width}m`);
                $('#fieldStatus').text(productField.field.status ? 'Đang hoạt động' : 'Ngừng hoạt động')
                    .removeClass('bg-success bg-danger')
                    .addClass(productField.field.status ? 'bg-success' : 'bg-danger');
                $('#fieldDescription').text(productField.field.description);

                // Cultivation period
                $('#startDate').text(new Date(productField.startDate).toLocaleDateString('vi-VN'));
                $('#endDate').text(new Date(productField.endDate).toLocaleDateString('vi-VN'));

                // Product Field Status
                const statusMap = {
                    0: { text: 'Sẵn sàng trồng', class: 'bg-primary' },
                    1: { text: 'Đang phát triển', class: 'bg-info' },
                    2: { text: 'Sẵn sàng thu hoạch', class: 'bg-success' }
                };
                const status = statusMap[productField.productFieldStatus] || { text: '', class: 'd-none' };
                const statusElement = $('#productFieldStatus');

                if (productField.productFieldStatus > 2) {
                    statusElement.closest('p').addClass('d-none');
                } else {
                    statusElement.closest('p').removeClass('d-none');
                    statusElement.text(status.text)
                        .removeClass('bg-primary bg-info bg-success bg-secondary bg-danger')
                        .addClass(status.class);
                }

                // Product information
                $('#productName').text(productField.product.productName);
                $('#category').text(productField.product.category.categoryName);
                $('#productDesc').text(productField.product.description);
                $('#productNote').text(productField.product.note);

                // Productivity
                $('#productivity').text(productField.productivity);
                $('#productivityUnit').text(productField.productivityUnit);

                details.removeClass('d-none');
            }
        });

        // Validation cho ngày tháng
        $('#startDate').change(function () {
            validateDateTimes();
        });

        $('#endDate').change(function () {
            validateDateTimes();
        });

        function validateDateTimes() {
            const startDate = new Date($('#startDate').val());
            const endDate = new Date($('#endDate').val());
            const endDateInput = $('#endDate');

            // First, check if dates are different and end date is before start date
            if (endDate.getFullYear() < startDate.getFullYear() ||
                (endDate.getFullYear() === startDate.getFullYear() && endDate.getMonth() < startDate.getMonth()) ||
                (endDate.getFullYear() === startDate.getFullYear() && endDate.getMonth() === startDate.getMonth() && endDate.getDate() < startDate.getDate())) {
                endDateInput.addClass('is-invalid');
                endDateInput.siblings('.invalid-feedback').text('End date must be after start date');
                return false;
            }

            // Next, check if the time difference is at least 2 hours
            const timeDiff = (endDate - startDate) / (1000 * 60 * 60); // Convert to hours
            if (timeDiff < 2) {
                // Set min date for end date (must be at least 2 hours after start date)
                const minEndDate = new Date(startDate);
                minEndDate.setHours(startDate.getHours() + 2);

                // Format datetime-local string
                const year = minEndDate.getFullYear();
                const month = String(minEndDate.getMonth() + 1).padStart(2, '0');
                const day = String(minEndDate.getDate()).padStart(2, '0');
                const hours = String(minEndDate.getHours()).padStart(2, '0');
                const minutes = String(minEndDate.getMinutes()).padStart(2, '0');

                endDateInput.attr('min', `${year}-${month}-${day}T${hours}:${minutes}`);
                endDateInput.val(`${year}-${month}-${day}T${hours}:${minutes}`);
                endDateInput.addClass('is-invalid');
                endDateInput.siblings('.invalid-feedback').text('End time must be at least 2 hours after start time');
                return false;
            }

            endDateInput.removeClass('is-invalid');
            return true;
        }

        // Thêm validation trước khi submit form
        $('form').submit(function (event) {
            if (!validateDateTimes()) {
                event.preventDefault();
                event.stopPropagation();
            }
        });
    </script>
}